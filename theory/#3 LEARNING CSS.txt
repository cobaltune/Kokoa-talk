
#3.0 How to Add CSS to HTML

CSS를 HTML 페이지에 추가하는 방법
1. 같은 HTML 파일에 HTML과 CSS 코드 두기 (inline CSS)

  <head>
    <style>
    </style>
  </head>

2. HTML과 CSS를 분리하기 (external CSS)  *추천

  <head>
    <link href="styles.css" rel="stylesheet" />
  </head>

분리된 파일을 갖게 되면 이 파일을 다른 많은 HTML 페이지에서 사용할 수 있기 때문


#3.1 Writing Our First CSS Lines

CSS가 하는 일은 HTML 태그를 가리키는 일
여기서 가리키는 대상을 selector라고 함, selector는 원하는 (많은) 속성을 가질 수 있음
그래서 속성들을 하나로 묶어주기 위해 “{ }”(curly bracket : 중괄호)를 사용
= HTML의 어떤 태그를 지정하고, CSS로 와서 원하는 속성값 작성

CSS 속성은 다음과 같은 문법을 지켜야 함

  가리키는 대상 {
    속성 이름: 속성값;  <!-- 크기를 나타내는 단위가 많음 -->
  }

*CSS 속성 이름에는 띄어쓰기를 하지 않음, 대신  “-” 사용


#3.2 What Does Cascading Mean

Cascading Style Sheet
: 브라우저가 CSS 코드를 읽을 때, 위에 있는 코드부터 차례대로 읽는다는 것을 의미

만약 두 CSS 코드가 같은 대상을 가리키게 되면, 맨 마지막에 있는 코드가 적용됨
이처럼 코드의 순서가 결과에 영향을 미침


#3.3 Blocks and Inlines

나중에 CSS의 모든 tex t속성을 알아볼 예정
오늘은 Box에 대해서 (CSS에서 정말 중요한 요소 중 하나)

block
: 바로 옆에 다른 요소들이 올 수 없음 (div, header, p, address, blockquote …)

inline = in the same line : 같은 줄에 위치할 수 있다
: 바로 옆에 다른 요소들이 올 수 있음 (span, a, img, code …)

대부분의 box들은 block이니, block이 아닌 종류를 기억하는 게 훨씬 편함


#3.4 Margin Part One

block을 inline으로, inline을 block으로 바꾸기

  div {
    display: inline;
  }

  span {
    display: block;
  }


어떤 요소가 inline이면 그 요소는 높이와 너비를 가질 수 없음
: inline은 높이와 너비가 없기 때문 ↔ block은 높이와 너비가 있음

div와 왼쪽, 위쪽 경계 사이에 빈 공간이 있음 (브라우저가 자동으로 적용시키는 사항)

block만 가지고 있는 특징
- margin : box의 border(경계)로부터 바깥에 있는 공간
- padding : box의 border(경계)로부터 안에 있는 공간
- border : box의 border(경계)

+) backgroundcolor로 알아보는 영역
  - html : 브라우저 전체
  - body : 안에 있는 내용 사이즈만큼,
            body는 default(기본값)로 margin: 8px;를 가짐


#3.5 Margin Part Two

방향 없이 값이 하나면 상하좌우 모두 적용됨
값이 두 개면 margin: (상, 하), (좌, 우)로도 줄 수 있음
값이 네 개면 시계방향으로 상 > 우 > 하 > 좌순으로 적용됨

collapsing margins (마진 겹침 현상 / 상하에만 취급)
: 두 box의 경계가 같을 때 발생하고, 두 margin은 하나로 취급됨


#3.6 Paddings and IDs

같은 div 태그에 차이를 주기 위해 id 속성 추가
CSS에서 사용하려면 #id로 작성

요소를 가리키는 방법
1. 태그로 가리키는 것
2. id로 가리키는 것
⇒ 중복되는 코드를 여러 번 쓸 필요 없음


#3.7 Border

border의 속성은 많지만
대부분의 border 속성은 별로라서 거의 한 가지 속성만 쓰게 될 거임

  border: 사이즈  두께  스타일(색상);


* = 전체

+) inline도 border를 가질 수 있음


#3.8 Classes

inline은 높이와 너비가 없기 때문에
margin이 좌, 우만 적용됨 / padding은 사방에 적용

class
: 요소를 가리킬 수 있으면서도 겹쳐도 되는 방법으로, 많은 곳에서 원하는 만큼 사용 가능
  id와 달리 class명은 유일할 필요가 없음 그래서 여러 요소들이 같이 쓸 수 있음
  그리고 한 번에 여러 class가 쓰일 수 있음

  CSS에서 사용하려면 .class로 작성

+) java나 python의 class와는 다른 거


#3.9 Inline Block

inline-block
: block으로 인식하게 해줌, 즉 높이도 가질 수 있고 사방에 margin을 줄 수도 있음
  그리고 바로 옆에 다른 요소가 오게 함

단점
- 아무것도 추가하지 않았지만 요소 사이에 빈 공간이 있음 (이유는 모름)
- 정해진 형식이 없다는 점 (= 요소의 크기에 따라 빈 공간이 다름)
⇒ inline-block은 Responsive Design(반응형 디자인)을 지원하지 않음

∴ 안 씀


#3.10 Flexbox Part One

박스의 위치를 바꾸는 쉬운 방법

Flex box (: 유연)
- 어떤 곳이든 둘 수 있어서 좋음
- 2d(2차원) 레이아웃에서 잘 작동함


Flex box 규칙
1. 부모 element에만 명시 (= 자식 element에는 어떤 것도 적으면 안됨)
    a. 부모 element를 flex container로 만들어야 함

    display: flex;
    justify-content:
      start;  /* 기본값 */
      center;
      flex-end;
      space-evenly;  /* 빈 공간을 같은 크기로 나누어서 배치 */
      space-around;  /* 좌우를 같은 크기로 고정하고, 빈 공간은 나누어서 배치 */
      space-between;  /* 좌우를 고정하고, 가운데는 자동으로 */

    justify-content의 주축은 수평으로 기본값이 설정되어 있고


2. 주축(main axis, 수평)과 교차축(cross axis, 수직)

    align-items의 교차축은 수직으로 기본값이 설정되어 있음

    +) 나중에 이 속성을 바꿀 수도 있음


*만약 body가 height를 가지고 있지 않다면 align-items를 설정하더라도 바뀌지 않음
이미 맨 아래(content의 크기만큼)를 차지하고 중심에 있기 때문


vh = viewport height (viewport는 screen으로 생각해도 됨)
: 100 screen height는 화면 높이의 100%를 말함
⇒ 화면 크기에 따라 바뀜


stretch
: stretch는 height 값에 따라 늘어나게 해줌, 따라서 고정된 height 값이 있으면 안 됨