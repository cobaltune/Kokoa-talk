
#6.20 Chats Screen part Two


#6.21 Find Screen Part One

숙제
- 환경설정 버튼 위 new (?) 표시
- Chat 페이지에서 채팅창이 여러 개일 때, 각 user component에 mb 추가


#6.22 Find Screen Part Two

같은 코드가 계속 반복되면 여러 번 쓰지 말고 변수로 만들기

숙제
- 회색 컬러 변수로 만들어서 수정


#6.23 Find Screen Part Three

대문자는 디자인적인 요소여서 코드에서 소문자로 쓰고 css에서 스타일 줄 수 있음
+) but 난 걍 대문자 쳐박음

members에 “|” 이거 쓰면 되는데 css 연습하려고 안쓴거
+) 텍스트가 더 낫겠군


#6.24 Find Screen Part Four

문제
- find.css에서 변수가 안먹는다 왜일까


#6.25 More Screen part One


#6.26 More Screen part Two


#6.27 Settings Screen part One

alt-screen-header (=alternative screen header)


#6.28 Settings and Chat Screen part One


#6.29 Chat Screen part Two


#6.30 Chat Screen part Three

status-bar와 header가 고정되어 있어서 main-screen이 mt를 가져야 함
: 어떤 요소를 고정하면 이전의 box들과는 다른 레이어가 되기 때문


#6.31 Chat Screen part Four


#6.32 Chat Screen part Five

flex의 children에게만 적용되는 order라는 엄청 멋진 기능
⇒ flex children의 순서를 바꾼다면 원한다면 display 방식을 바꿀 수 있음

message bubble의 time 순서 바꾸는 방법 1

  .message-row__own .message__bubble {
    background-color: var(--yellow);
    border-top-right-radius: 0;
    border-top-left-radius: 18px;
    order: 1;
  }

  .message-row__own .message__time {
    order: 0;
  }

+) 대신 코드가 많이 필요함


message bubble의 time 순서 바꾸는 방법 2

  .message-row__own .message__info {
    flex-direction: row-reverse;
  }

∴ modifier을 기준으로 뒤집음 = HTML에 손을 대지 않고 순서를 바꿀 수 있음


#6.33 Write Message Input

`.reply input`에 `width:100%`을 주려고 했는데 안되는 이유
: `input`이 `column` 안에 있기 때문,
  그런데 `column`은 `width`를 갖고 있지 않음

  .reply .reply__column:first-child {
    width: 10%;
  }

  .reply .reply__column:last-child {
    width: 90%;
  }

  .reply input {
    height: 30px;
    width: 100%;
  }

⇒ 먼저 `column`에 `width`를 주어야 `input`에 `width`를 줄 수 있음


#6.34 Splash Screen part One

페이지를 새로고침 할 때마다 splasch 화면이 뜨도록

splash-screen에 absolute를 주면
absolute인 div는 가장 가까운 relative인 부모에 맞춰 정렬됨
근데 니콜라스는 이 div에 어떠한 부모도 있는 걸 원치 않음, body에 기준해서 정렬되기를 바람

  #splash-screen {
    background-color: var(--yellow);
    position: absolute;
    height: 100vh;  /* 화면 높이의 100%를 의미 */
    width: 100vw;  /* 화면 넓이의 100%를 의미 */
    top: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 132px;
  }


#6.35 Splash Screen part Two

원하는 element를 없어지도록 만들어야 하는데
css로는 element를 페이지로부터 완전히 없앨 수는 없음

먼저 keyframes 애니메이션을 만들어서

  @keyframes hideSplashScreen {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  #splash-screen {
    animation: hideSplashScreen 1s ease-in-out;
  }

⇒ 되긴 하지만 다시 돌아감


두 가지가 중요
1. 작동은 하지만 되돌아옴
   : 애니메이션이 끝났기 때문, 애니메이션이 끝나면 element들은 (이전의 상태인 opacity: 1로) 맨 처음의 상태로 돌아가버림
    
2. for 추가

  #splash-screen {
    animation: hideSplashScreen 1s ease-in-out forwards;
  }


`forwards`
: forwards는 마지막 keyframes를 기억함,
  그래서 마지막 속성 값(final property value)을
  (마지막 속성값은 마지막 keyframes으로 정해지고) 애니메이션이 끝나고 유지함
⇒ 마지막 속성인 opacity: 0이 애니메이션이 끝나고도 유지

but 문제는 그 element가 아직 그대로 있다는 것 그 말인즉슨 클릭을 할 수 없음

`dispaly: none;`도 클릭안되서 `visibility: hidden;`를 주는데
애도 요소검사를 하면 html에 아직 존재해서 크롬에서 볼 수 있는데

  @keyframes hideSplashScreen {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      visibility: hidden;
      /* 마우스에 걸리지 않게 빠져버리는 것을 의미 */
    }
  }

여기에선 단지 브라우저가 이 element를 무시하도록 기술 같은 걸 쓴 거
암튼 클릭은 할 수 있음

  #splash-screen {
    animation: hideSplashScreen 0.2s ease-in-out forwards;
    animation-delay: 1s;  /* 애니메이션 지연 */
  }

  /* 애니메이션은 0.2초동안 일어나고, 1초 후에 뿜하고 사라지게 */

+) 그래서 뭔가를 숨긴다거나 할 때는 이 테크닉을 사용하면 안 됨,
   뭔가를 숨기거나 html을 제거 하고 싶다면 javascript가 필요


#6.36 Navigation Animation



#6.37 More Animations
#6.38 Animating Chats Screen
#6.39 Recap
#6.40 No Mobile Media Query