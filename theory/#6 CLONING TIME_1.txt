
#6.0 Introduction

.DS_store : 이건 맥os에서 만든 보이지 않는 임시파일

.gitignore : 무시하고 싶은 파일 이름을 기록하는 파일

  .DS_store


#6.1 Sign Up Screen part One

index.html이라고 짓는 이유
: 대부분의 웹서버가 디폴트로 index.html을 찾아보도록 설정돼있기때문
  
  (+ index : 첫 번째)


  `<div class="status-bar__column">`

이렇게 긴 class 이름을 지은 이유 (니콜라스 한정)
: column 같은 이름은 어디서든 자주 쓰이니까
  under bar (__)를 통해 구분 짓고, 부모 요소와 자식 요소까지 한 번에 보기 위해


#6.2 BEM

BEM (= block element modifier)
⇒ CSS 클래스네임을 어떻게 지으면 좋을지
  - 기본적으로 ID를 사용하지 않으며, class만을 사용
  - 각각 `__` 와 `--`로 구분
  - '어떻게 보이는가'가 아니라 '어떤 목적인가'에 따라 이름을 지음

장점 : 어떤 클래스가 어떤 책임을 가지는지, 서로 관계는 어떻게 되는지 쉽게 알 수 있음
단점 : 클래스가 엄청 커질 수 있다는 점

BEM 참고 사이트
[https://nykim.work/15](https://nykim.work/15)

  /* block component */
  .btn{}

  /* element that depends upon the block */
  .btn__price{}

  /* modifier that changes the style of the block */
  .btn--orang{}
  .btn--big{}


#6.3 Font Awesome

아이콘을 추가하는 방법
1. 직접 아이콘 구하는 법
   직접 이미지를 만들고 추출
    
2. svg파일 이용하는 법
  (svg : 픽셀이 없는 이미지 파일 형식,
  수학으로만 구성된 형식으로 좌표로 되어있어서 원하는 만큼 늘릴 수 있음)

추천 아이콘 사이트
1. [https://heroicons.com/](https://heroicons.com/) (무료)
   ㄴ 가끔 필요한 아이콘을 못 찾을 수도 있음
    
2. [https://fontawesome.com/icons](https://fontawesome.com/icons) (유료 / 무료)
   ㄴ 위 사이트 이용하려면 이메일 제출하고 코드 복붙
    

code kit 설치

  <script
        src="https://kit.fontawesome.com/6478f529f2.js"
        crossorigin="anonymous"
      ></script>

이 js파일이 html이나 css에 stylesheet를 추가하고, 많은 클래스 이름과 폰트들을 import
(= style sheet를 만들고, 링크를 만들고, attribute를 설정하는 등 이런것들이 압축되어 있음)


fontawesome에 아이콘을 크게 만드는 class가 있음
원하는 아이콘 검색 > 선택 > 사이즈 옵션

  <!-- battery icon -->
          <i class="fas fa-battery-full fa-lg"></i>


#6.4 Sign Up Screen part Two

<form> 안에 버튼 추가하는 법
  1. <input type=”submit”>
  2. <button>


#6.5 Status Bar CSS

<head>에 link:css라고 치면

  <link rel="stylesheet" href="styles.css" />

위와 같이 나오는데, 경로만 수정해 주면 됨

*google font import 할 때 사용할 폰트만 선택,
 모든 폰트를 선택하면 그만큼 추가하는 파일이 많아서 웹사이트가 무거워짐


justify-content 대신 컨테이너 하나를 말 그대로 중심에 놓는 css hack(기술)

  .status-bar {
    display: flex;
    justify-content: center;
  }

  .status-bar__column {
    width: 33%;
  }

  .status-bar__column:nth-child(2) {
    display: flex;
    justify-content: center;
  }

  .status-bar__column:last-child {
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }

+) justify-content: space-between;도 좋지만
   다른 width를 갖고 있기 때문에 중심이 맞지 않아서 status-bar에서는 비추


#6.6 Sign Up Screen part Three

reset css 2.0 사이트
[https://cssdeck.com/blog/scripts/eric-meyer-reset-css/](https://cssdeck.com/blog/scripts/eric-meyer-reset-css/)
⇒ 브라우저에 의해 적용되는 스타일을 리셋하고, 직접 디자인하는 게 더 좋은 방법

html에 link를 여러 줄 만드는 것보다
css를 이용해서 @import 해서 (styles.css 파일에서) reset.css를 추가하는 방식을 추천

보통 style.css 파일은 다른 css파일을 추가하는 파일로 쓰임
(= 나폴레옹의 분할 정복법을 따라서 쪼개고 쪼개는 ㅋ / css코드를 여러 파일로 분할했다가 다시 합치기)


Page Ruler Redux (구글 크롬 확장 프로그램)
[https://parkjh7764.tistory.com/81](https://parkjh7764.tistory.com/81)
⇒ 이미지 크롬으로 열어서 (*확장 프로그램 세팅에 파일 url 공유 허용) 정확한 사이즈 측정할 수 있음


#6.7 Log In Form part One

ColorZila (구글 크롬 확장 프로그램)
: 색상을 가져올 수 있음
⇒ 저번에 알려준 color picker이랑 비슷한 듯 ?


#6.8 Log In Form part Two

not css ⇒ 뭔가가 적용되는 걸 원하지 않을 때

  #login-form input:not([type='submit']) {
    border-bottom: 1px solid rgb(0, 0, 0, 0.2);
    transition: border-color 0.3s ease-in-out;
  }

  /* [] 사이에 쓰인 것들은 특성 선택자(attribute selector) */

not css 참고 사이트
[https://developer.mozilla.org/ko/docs/Web/CSS/:not](https://developer.mozilla.org/ko/docs/Web/CSS/:not)


inherit (= inheritance : 상속)
: 부모로부터 상속받도록


#6.9 Recap and Forms

styles.css 파일에는
font-family와 같이 모든 스크린에 적용될 수 있는 스타일을 써놓는 게 니콜라스 스타일 +) background-color도

다음 스크린으로 넘어가기위해 = 페이지 이동

  <form action="friends.html" method="get" id="login-form">

action
: 어떤 페이지로 data를 보낼 건지 저장, 니콜라스는 새로 만들 파일로 보낼 예정

*url에 해당하는 파일이 반드시 존재해야 함


method (2가지 방식 중 하나만 쓸 수 있음)
1. POST (현재 프로젝트에서는 사용할 수 없음,
         왜냐면 백엔드 서버에 정보를 전송하는 방식이기 때문
         / 지금 우리는 서버를 갖고 있지 않음)
2. GET
   - 보안에 취약함 ⇒ username이랑 password를 GET방식으로 절대 보내면 안됨
     URL에 포함되어도 상관없는 정보들은 GET방식으로 보내도 됨        

+) 위 방식에 대해 좀 더 알아보고 싶으면 [Youtube 클론 코딩] 들어보셈


#6.10 Navigation Bar part One

navigation은 보통 아래와 같이 구성됨

  <nav>
    <ul>
      <li><a href=""></a></li>
      <li><a href=""></a></li>
      <li><a href=""></a></li>
      <li><a href=""></a></li>
    </ul>
  </nav>

  <!-- VSC 단축키 = nav>ul>li*4>a -->


#6.11 Navigation Bar part Two


#6.12 Border Box

css는 width 값을 유지하기 위해 padding으로 준 쓸 수 없는 공간만큼
content는 padding 부분을 제외하고 나타나게 됨
⇒ 때문에 `box-sizing : border-box;`를 사용
   = box 사이즈가 커지길 원하지 않으니까
     css에게 padding을 줘도 신경 쓰지 말고
     box 사이즈를 변경하지 말라고 알려주는 것


#6.13 Navigation Bar part Three

사각형을 원으로 만들고 싶으면 사각형 width의 반을 값으로 쓰면 됨

`position: absolute;`는 가장 가까운 relative를 가진 부모 기준으로 움직여서 
absolute를 쓰고 싶은 애를 감싼 container에 relative를 써줘야 함


#6.14 Screen Header

header 부분에 padding을 주면 status bar의 fixed 때문에
마진 겹침 현상이 보이는데 걍 pt 떄려 넣음


#6.15 Friends Screen part One


#6.16 User Component part One

user-component 안에 들어가는 이미지 사이즈는 총 3가지 (sm / md / lg)

Chat page에 있는 user 부분을 기본값으로 쓰려고 세팅,
friends page에 있는 건 기본값에서 사이즈 변경해서 사용

어쨌든 구조는 똑같게 만들어둠
⇒ 스크린샷들을 보면서 (반복되는 것들을) component로 만들면 작업하기 쉬움


#6.17 User Component part Two


#6.18 Finishing Friends Screen


#6.19 Chats Screen part One